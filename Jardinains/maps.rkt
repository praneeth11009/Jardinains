
#lang racket
(provide map1)
(define greater1 (lambda (x y)
         (cond ((> (caar x) (caar y)) (if (> (cdar x)(cdar y)) #t #f)))))
(define greater (lambda (x y)
          (if (> (caar x) (caar y)) #t #f)))
(define p (lambda (x y)
  (if (equal? (car x) (car y)) #T #F)))
(define (make-same-list l p)
   (if (= (length l) 1) (append l p)
  (if (equal? (caar l) (caadr l)) (make-same-list (cdr l) (append (list (car l)) p))
      (append (cadr l) p))))
(define (not-common-in-list l p)
  (if (= (length l) 1) (append l p)
      (if (equal? (caar l) (caadr l)) (not-common-in-list (cdr l) p)
                                      (not-common-in-list (cdr l) (append (list (car l)) p)))))
(define (sorted-list2 l)
  (sort l p))
(define (sorted-list l)
  (sort l greater))
(define (sorted-list1 l)
  (sort l greater1))
(define (final-list l)
  (sorted-list2 (sorted-list1 (sorted-list l))))
(define (make-level-funx p x1 x2 y1 y2 f x delx)
 (let ((q (f x)))
  (if (or (<= x2 x) (> y1 (f x)) (< y2 (f x))) '()
      (cons (cons (cons x (f x))  p) (make-level-funx p x1 x2 y1 y2 f (+ delx x) delx)))))
(define (make-level-funy p x1 x2 y1 y2 f x delx)
   (let ((q (f x)))
  (if (or (<= x2 x) (> y1 (f x)) (< y2 (f x))) '()
      (cons (cons (cons (f x) x)  p) (make-level-funy p x1 x2 y1 y2 f (+ delx x) delx)))))
(define (make-level-region x1 x2 y1 y2 delx dely)
  (lambda (l)
    (if (= 1 (length l)) ((make-level-region-helper x1 x2 y1 y2 delx dely) (car l))
        (append ((make-level-region-helper x1 x2 y1 y2 delx dely)(car l))((make-level-region x1 x2 y1 y2 delx dely) (cdr l)))))) 
(define (make-level-region-helper x1 x2 y1 y2 delx dely)
  (lambda (l)
  (let* ((x2 (list-ref l 4))
         (f (list-ref l 2))
        (x (list-ref l 3))
        (checkx/y (list-ref l 0))
        (p (list-ref l 1)))
    (if (<= (abs (- x2 x1)) delx) '(list (list (cdar l) x (f x)))
        (if (null? l) '()
            (append (if (= checkx/y 1)(make-level-funy p y1 y2 x1 x2 f (+ dely x) dely)
                        (make-level-funx p x1 x2 y1 y2 f (+ delx x) delx))
                    ))))))
(define (straight-line m c)(lambda (x) (+ c (* m x))))
(define (parabola x1 a)(lambda(x)(let ((p (- x x1)))(* a (* p p)))))
(define (circle a c)(lambda (x) (let* ((t (- c x))(p (- a t))) (+ 100 (floor (sqrt (abs(- (* a a) (* p p)))))))))

(define (cosine p)(lambda (x) (+ p (* p (floor (cos (* (/ pi 180) x)))))))
;define symm fun dig. fun
;define for each type block and diff fun.
;abstraction for making symm.fun different func.
(define level-test
  (append (list (list 1 (cons 2 2) (straight-line 0 50) 50 900)) (list (list 1 (cons 3 3) (straight-line 0 100) 50 900))))
(define level-smiley
  (append (list (list 0 (cons 1 1) (circle 500 500) 50 900)) (list (list 0 (cons 1 1) (circle 200 400) 50 900))
          (list (list 0 (cons 1 1) (circle 200 600) 50 900)) (list (list 0 (cons 1 1) (circle 200 450) 50 900))))
(define level-box
  (append (list (list 0 (cons 1 1) (straight-line 0 50) 100 800))(list (list 0 (cons 1 1) (straight-line 0 450) 100 800))
          (list (list 0 (cons 2 2) (straight-line 0 75) 150 750))(list (list 0 (cons 2 2) (straight-line 0 425) 250 650))
          (list (list 0 (cons 4 1) (straight-line 0 100) 200 700))(list (list 0 (cons 4 1) (straight-line 0 400) 250 650))
          (list (list 0 (cons 3 3) (straight-line 0 125) 250 650))(list (list 0 (cons 3 3) (straight-line 0 375) 250 650))
          (list (list 0 (cons 1 1) (straight-line 0 150) 250 650)) (list (list 0 (cons 1 1) (straight-line 0 350) 250 650))
          (list (list 0 (cons 4 1) (straight-line 0 175) 275 625)) (list (list 0 (cons 4 1) (straight-line 0 325) 275 625))
          (list (list 0 (cons 2 2) (straight-line 0 200) 300 600)) (list (list 0 (cons 2 2) (straight-line 0 300) 300 600))
          (list (list 0 (cons 3 3) (straight-line 0 225) 325 575)) (list (list 0 (cons 3 3) (straight-line 0 275) 325 575))
          (list (list 1 (cons 1 1) (straight-line 0 100) 50 800)) (list (list 1 (cons 1 1) (straight-line 0 800)  50 800))
          (list (list 1 (cons 2 2) (straight-line 0 150) 75 700)) (list (list 1 (cons 2 2) (straight-line 0 750)  75 750)) 
          (list (list 1 (cons 4 1) (straight-line 0 200) 100 600)) (list (list 1 (cons 4 1) (straight-line 0 700) 100 700))
          (list (list 1 (cons 3 3) (straight-line 0 250) 125 250)) (list (list 1 (cons 3 3) (straight-line 0 650)  125 650)))) 

(define level-Hi
  (append (list (list 1 (cons 1 1) (straight-line 0 50) 50 900)) (list (list 1 (cons 1 1) (straight-line 0 450) 50 900))
          (list (list 1 (cons 3 3) (straight-line 0 150) 50 900))(list (list 1 (cons 2 2) (straight-line 0 100) 50 900))
          (list (list 1 (cons 2 2) (straight-line 0 400) 50 900))(list (list 1 (cons 3 3) (straight-line 0 350) 50 900))
         (list (list 0 (cons 2 2) (straight-line 0 275) 150 350)) (list (list 0 (cons 3 3 ) (straight-line 0 250) 150 350))
          (list (list 0 (cons 2 2) (straight-line 0 200) 150 350)) (list (list 0 (cons 3 3) (straight-line 0 225) 150 350))
        (list (list 0 (cons 1 1) (straight-line 0 50) 0 200)) (list (list 0 (cons 1 1) (straight-line 0 50) 300 500))
        (list (list 0 (cons 1 1) (straight-line 0 50) 550 900))(list (list 0 (cons 1 1) (straight-line 0 450) 550 900))
        (list (list 0 (cons 1 1) (straight-line 0 450) 0 200)) (list (list 0 (cons 1 1) (straight-line 0 450) 300 500))
       (list (list 1 (cons 2 2) (straight-line 0 650) 50 900))(list (list 1 (cons 3 3) (straight-line 0 700) 50 900))
        (list (list 1 (cons 2 2) (straight-line 0 800) 50 900))(list (list 1 (cons 3 3) (straight-line 0 750) 50 900))
          ))
(define level-4
  (append   (list (list 1 (cons 1 1) (straight-line 0 100) 50 800)) (list (list 1 (cons 1 1) (straight-line 0 800)  50 800))
          (list (list 1 (cons 2 2) (straight-line 0 150) 75 700)) (list (list 1 (cons 2 2) (straight-line 0 750)  75 750)) 
          (list (list 1 (cons 4 1) (straight-line 0 200) 100 600)) (list (list 1 (cons 4 1) (straight-line 0 700) 100 700))
          (list (list 1 (cons 3 3) (straight-line 0 250) 125 250)) (list (list 1 (cons 3 3) (straight-line 0 650)  125 650))
          (list (list 0 (cons 2 2) (straight-line 0 275) 250 650)) (list (list 0 (cons 3 3 ) (straight-line 0 250) 250 650))
          (list (list 0 (cons 2 2) (straight-line 0 200) 250 650)) (list (list 0 (cons 3 3) (straight-line 0 225) 250 650))
        (list (list 0 (cons 1 1) (straight-line 0 50) 100 800)) (list (list 0 (cons 2 2) (straight-line 0 75) 100 800))
              (list (list 0 (cons 2 2) (straight-line 0 500) 100 800)) (list (list 0 (cons 2 2) (straight-line 0 500) 100 800))

          (list (list 1 (cons 2 2) (straight-line 0 150) 75 700)) (list (list 1 (cons 2 2) (straight-line 0 750)  75 750)) 
          (list (list 1 (cons 4 1) (straight-line 0 200) 100 600)) (list (list 1 (cons 4 1) (straight-line 0 700) 100 700))
          (list (list 1 (cons 3 3) (straight-line 0 250) 125 250)) (list (list 1 (cons 3 3) (straight-line 0 650)  125 650))))
(define level-3
         (append  (list (list 0 (cons 1 1) (straight-line 0 275) 250 650))
                  (list (list 0 (cons 2 2 ) (straight-line 0 250) 250 650))
          (list (list 0 (cons 4 1) (straight-line 0 200) 250 650)) (list (list 0 (cons 3 3) (straight-line 0 225) 250 650))
          (list (list 0 (cons 1 1) (straight-line 0 375) 250 650)) (list (list 0 (cons 2 2 ) (straight-line 0 350) 250 650))
          (list (list 0 (cons 4 1) (straight-line 0 300) 250 650)) (list (list 0 (cons 3 3) (straight-line 0 325) 250 650)) 
         (list (list 1 (cons 2 2) (straight-line 0 150) 125 700)) (list (list 1 (cons 2 2) (straight-line 0 750)  125 750)) 
         (list (list 1 (cons 4 1) (straight-line 0 200) 100 600)) (list (list 1 (cons 4 1) (straight-line 0 700) 100 700))
           (list (list 1 (cons 3 3) (straight-line 0 250) 75 250)) (list (list 1 (cons 3 3) (straight-line 0 650)  75 650))))
(define level-5
        (append 
          (list (list 0 (cons 4 1) (straight-line (/ 1 5) 300) 250 650))
           (list (list 0 (cons 3 3 ) (straight-line (/ -1 5) 350) 250 650))
          (list (list 0 (cons 4 1) (straight-line (/ 1 5) 275) 250 650)) (list (list 0 (cons 3 3) (straight-line (/ -1 5) 325) 250 650)) 
         (list (list 1 (cons 2 2) (straight-line 0 150) 125 700)) (list (list 1 (cons 2 2) (straight-line 0 750)  125 750)) 
         (list (list 1 (cons 4 1) (straight-line 0 200) 100 600)) (list (list 1 (cons 4 1) (straight-line 0 700) 100 700))
           (list (list 1 (cons 3 3) (straight-line 0 250) 75 250)) (list (list 1 (cons 3 3) (straight-line 0 650)  75 650))))
(define level-6
  (list (list 0 (cons 1 1) (g 0) 0 900) (list 0 (cons 4 1) (g -25) 0 900)
        (list 0 (cons 2 2) (g -50) 0 900) (list 0 (cons 3 3) (g 25) 0 900)
        (list 1 (cons 1 1) (straight-line 0 50) 100 300)
        (list 1 (cons 4 1) (straight-line 0 150) 160 350)
        (list 1 (cons 2 2) (straight-line 0 250) 170 400)
        (list 1 (cons 3 3) (straight-line 0 470) 225 480)
        (list 1 (cons 2 2) (straight-line 0 700) 170 700)
        (list 1 (cons 4 1) (straight-line 0 800) 160 800)
        (list 1 (cons 1 1) (straight-line 0 900) 100 900)))
(define (map1 r)
  (cond ((= r 3) ((make-level-region 0 900 0 450 50 25) level-5))
        ((= r 4) (final-list ((make-level-region 0 900 0 450 50 25) level-4)))
        ((= r 5) ((make-level-region 0 900 0 450 50 25) level-3)) 
        ((= r 1) ((make-level-region 0 900 0 450 50 25) level-Hi))
        ((= r 2) ((make-level-region 0 900 0 450 50 25) level-box))
        ((= r 6) ((make-level-region 0 900 0 450 50 25) level-6))))
